"""
Задание.
1. Проанализировать скорость и сложность одного любого алгоритма, разработанных
в рамках практического задания первых трех уроков.

Примечание: попробуйте написать несколько реализаций алгоритма и сравнить их.
******************************************************************************

В одномерном массиве целых чисел определить два наименьших элемента.
Они могут быть как равны между собой (оба являться минимальными), так и
различаться.
"""
import cProfile
from random import randint

N = 1000000


def get_lst(n):
    a = [randint(0, 1000) for _ in range(n)]
    return a


def two_min_el(lst):  # 1-й вариант
    if lst[0] > lst[1]:
        min_1 = 0
        min_2 = 1
    else:
        min_1 = 1
        min_2 = 0

    for i in range(len(lst)):
        if lst[i] < lst[min_1]:
            b = min_1
            min_1 = i
            if lst[b] < lst[min_2]:
                min_2 = b
        elif lst[i] < lst[min_2]:
            min_2 = i
    return min_1, min_2


def two_min_el_sort(lst):  # 2-й вариант
    sort_lst = sorted(lst)
    return sort_lst[0], sort_lst[1]


def two_min_el_del(lst):  # 3-й вариант
    min_1 = min(lst)
    lst.remove(min_1)
    min_2 = min(lst)
    return min_1, min_2


def launch():
    a = get_lst(N)
    two_min_el(a)
    two_min_el_sort(a)
    two_min_el_del(a)


cProfile.run('launch()')

"""
В данных алгоритмах в принципе все хорошо, время их исполнения меняется 
незначительно. Думаю, оценку сложности алгоритма можно присвоить как O(n).
Но! если создание массива вынести за функцию, то эта часть алгоритма
будет уже O(n^2), т.к. при количестве 1.000 чисел время составляет от 5 до 6 секунд,
а при количестве 10.000 время возрастает до 60-70 секунд. Страшно представить
сколько времени займет тот же 1.000.000 чисел
"""
